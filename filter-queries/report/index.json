{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-25T16:32:57.459Z",
    "end": "2023-05-25T16:32:57.907Z",
    "duration": 448,
    "testsRegistered": 74,
    "passPercent": 4.054054054054054,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 71,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "56401432-fcbe-4d82-9134-f5d2dee7c2ea",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "Setup in \"{root}\"",
          "fullTitle": "Setup in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": "[\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:55 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"41c88869-1b66-47fc-ac9d-469cfbc7d0fb\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:55Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch AeronauticCrv Collection\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv\",\n        \"headers\": {\n          \"accept\": \"application/json\"\n        }\n      },\n      \"header\": {\n        \"content-disposition\": \"inline; filename=\\\"AeronauticCrv.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"996\",\n        \"content-type\": \"application/json\",\n        \"date\": \"Thu, 25 May 2023 16:32:55 GMT\",\n        \"etag\": \"W/\\\"aa3f3401ff99486b4b21fbdff2e7c561--gzip\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"cc53a92e-d4fb-4249-b2e2-0948c2d19068\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\n  \\\"links\\\" : [ {\\n    \\\"rel\\\" : \\\"alternate\\\",\\n    \\\"type\\\" : \\\"text/html\\\",\\n    \\\"title\\\" : \\\"This document as HTML\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=html\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/0.0/schema-item\\\",\\n    \\\"title\\\" : \\\"Schema of features in 'Aeronautic (Curves)'\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/schema\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/queryables\\\",\\n    \\\"title\\\" : \\\"Queryable attributes\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/queryables\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/sortables\\\",\\n    \\\"title\\\" : \\\"Sortable attributes\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/sortables\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/styles\\\",\\n    \\\"title\\\" : \\\"Styles to render the data in maps\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/styles\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/tilesets-vector\\\",\\n    \\\"title\\\" : \\\"Access the data as tiles\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/tiles\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"text/csv\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as CSV\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=csv\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/flatgeobuf\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as FlatGeobuf\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=fgb\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"text/html\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as HTML\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=html\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/geo+json\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as GeoJSON\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/vnd.ogc.fg+json\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as JSON-FG\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=jsonfg\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as JSON-FG (GeoJSON Compatibility Mode)\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=jsonfgc\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"self\\\",\\n    \\\"type\\\" : \\\"application/json\\\",\\n    \\\"title\\\" : \\\"This document\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=json\\\"\\n  } ],\\n  \\\"title\\\" : \\\"Aeronautic (Curves)\\\",\\n  \\\"description\\\" : \\\"Aeronautical Facilities: Information about an area specifically designed and constructed for landing, accommodating, and launching military and/or civilian aircraft, rockets, missiles and/or spacecraft.<br/>Aeronautical Aids to Navigation: Information about electronic equipment, housings, and utilities that provide positional information for direction or otherwise assisting in the navigation of airborne aircraft.\\\",\\n  \\\"id\\\" : \\\"AeronauticCrv\\\",\\n  \\\"extent\\\" : {\\n    \\\"spatial\\\" : {\\n      \\\"bbox\\\" : [ [ 36.395158, 32.693301, 36.430814, 32.717333 ] ],\\n      \\\"crs\\\" : \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\"\\n    },\\n    \\\"temporal\\\" : {\\n      \\\"interval\\\" : [ [ \\\"2011-03-16T14:51:12Z\\\", \\\"2015-09-11T19:15:35Z\\\" ] ],\\n      \\\"trs\\\" : \\\"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\\\"\\n    }\\n  },\\n  \\\"itemType\\\" : \\\"feature\\\",\\n  \\\"crs\\\" : [ \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/3395\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/3857\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/4326\\\" ],\\n  \\\"storageCrs\\\" : \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\",\\n  \\\"itemCount\\\" : 20\\n}\"\n    }\n  },\n  {\n    \"title\": \"fetch all AeronauticCrv features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"AeronauticCrv.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1747\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:55 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"8f468f54-501e-4ce4-b44a-8b2bfe51642d\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":20,\\\"numberMatched\\\":20,\\\"timeStamp\\\":\\\"2023-05-25T16:32:55Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4270030,32.7114540],[36.4251990,32.7137030]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:12Z\\\",\\\"UFI\\\":\\\"2d008c34-4458-4226-b335-cf903d261ce9\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4009090,32.7000770],[36.4031330,32.7013330],[36.4208880,32.7113020],[36.4231110,32.7125400],[36.4251990,32.7137030],[36.4252970,32.7137690]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"1257bf27-3f91-461d-8a3b-a95af2ea1f5a\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4049030,32.6990350],[36.4031330,32.7013330]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:12Z\\\",\\\"UFI\\\":\\\"0ee76209-d69a-4cf5-b74f-dfe563ddede7\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4226450,32.7090630],[36.4208880,32.7113020]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:13Z\\\",\\\"UFI\\\":\\\"0463e92c-cf42-4c73-ac2f-81e0d7a0654c\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3989300,32.6988040],[36.4005290,32.6965830]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"944e084c-49dc-42b3-8566-bc75e5fecf39\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":6,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4025330,32.6952330],[36.4019600,32.6953240],[36.4014490,32.6954050],[36.4012670,32.6955310],[36.4000010,32.6933010],[36.3994110,32.6935090],[36.3989490,32.6936710],[36.4000010,32.6933010],[36.4012670,32.6955310],[36.4005290,32.6965830],[36.4005160,32.6962630],[36.3995820,32.6946740]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"6d64efa5-affb-474e-893f-47aabac7b5da\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":7,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4234650,32.7141110],[36.4234560,32.7140710],[36.4231110,32.7125400]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"5ccc277e-fa94-49ca-b566-d41246d3e42b\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":8,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4294830,32.7114930],[36.4284420,32.7114460],[36.4272630,32.7113940],[36.4270030,32.7114540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"b9175c1f-43c2-455b-bdd0-f91cdffaaf6f\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":9,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4259320,32.7173330],[36.4257630,32.7170350],[36.4245000,32.7148030],[36.4257630,32.7170350],[36.4263700,32.7167880],[36.4267580,32.7166290]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:14Z\\\",\\\"UFI\\\":\\\"c9a2d4e5-67d6-458b-a89a-d664d99ea865\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":10,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3993320,32.7003240],[36.4009090,32.7000770]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"d6066359-c2cc-460e-98d4-332b915fb21f\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":11,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4268870,32.7099400],[36.4248150,32.7102540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:15Z\\\",\\\"UFI\\\":\\\"e4d806b5-73ce-4a76-ba6b-f2d80b1cad30\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":12,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4022750,32.6963170],[36.4026520,32.6977730]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:16Z\\\",\\\"UFI\\\":\\\"096f8898-4886-408a-b3a3-af40829b8508\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":13,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4233570,32.7150680],[36.4237650,32.7150030],[36.4244410,32.7148960],[36.4245000,32.7148030],[36.4250700,32.7139060],[36.4251990,32.7137030],[36.4250700,32.7139060],[36.4252450,32.7141020],[36.4262220,32.7157360]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:16Z\\\",\\\"UFI\\\":\\\"d27b2fbd-01e2-44d2-81fc-dd4b1f1b89bb\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":14,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4284420,32.7114460],[36.4292690,32.7106350],[36.4307820,32.7107260],[36.4308140,32.7112130],[36.4307490,32.7116100]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:17Z\\\",\\\"UFI\\\":\\\"29c39f1d-9c5e-4950-9f9d-80a4ea9231bf\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":15,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3987500,32.6989870],[36.3964050,32.6988310]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"80c53866-0b64-4c42-9232-33b6b9a50f86\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":16,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3951580,32.6996890],[36.3981120,32.6997940]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"7e1929ee-480f-45eb-af1f-aa41017d079a\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":17,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4009090,32.7000770],[36.3989300,32.6988040]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"755c84a1-bee7-4a06-940a-2412271b6d98\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":18,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3951580,32.6996890],[36.3951760,32.6991010],[36.3952030,32.6987410]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"74265cb8-e821-4b6a-b1ec-aac5cf988761\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":19,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3989300,32.6988040],[36.3987500,32.6989870],[36.3981120,32.6997940]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"81bb2203-dda3-484e-9509-a8dd09e52ac0\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":20,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3981120,32.6997940],[36.3982740,32.7004670],[36.3983450,32.7007660]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"b3a4e01c-98e1-4076-852c-84363fbba283\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"0e048ea5-d2ae-4c7b-94bd-20c32e1b3e0a\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"4681dba1-d09d-442f-8cb5-ac2b246a3769\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"c04961ab-fe42-4c75-b8c3-7930861599b7\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"1cbf7be9-3225-4e69-8e1c-46bbb1ef5853\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch AeronauticCrv Collection\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv\",\n        \"headers\": {\n          \"accept\": \"application/json\"\n        }\n      },\n      \"header\": {\n        \"content-disposition\": \"inline; filename=\\\"AeronauticCrv.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"996\",\n        \"content-type\": \"application/json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"etag\": \"W/\\\"aa3f3401ff99486b4b21fbdff2e7c561--gzip\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"22ae814e-cd26-494c-aed6-e38bb860bad5\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\n  \\\"links\\\" : [ {\\n    \\\"rel\\\" : \\\"alternate\\\",\\n    \\\"type\\\" : \\\"text/html\\\",\\n    \\\"title\\\" : \\\"This document as HTML\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=html\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/0.0/schema-item\\\",\\n    \\\"title\\\" : \\\"Schema of features in 'Aeronautic (Curves)'\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/schema\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/queryables\\\",\\n    \\\"title\\\" : \\\"Queryable attributes\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/queryables\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/sortables\\\",\\n    \\\"title\\\" : \\\"Sortable attributes\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/sortables\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/styles\\\",\\n    \\\"title\\\" : \\\"Styles to render the data in maps\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/styles\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"http://www.opengis.net/def/rel/ogc/1.0/tilesets-vector\\\",\\n    \\\"title\\\" : \\\"Access the data as tiles\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/tiles\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"text/csv\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as CSV\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=csv\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/flatgeobuf\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as FlatGeobuf\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=fgb\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"text/html\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as HTML\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=html\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/geo+json\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as GeoJSON\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=json\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/vnd.ogc.fg+json\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as JSON-FG\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=jsonfg\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"items\\\",\\n    \\\"type\\\" : \\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\n    \\\"title\\\" : \\\"Access the features in the collection 'Aeronautic (Curves)' as JSON-FG (GeoJSON Compatibility Mode)\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=jsonfgc\\\"\\n  }, {\\n    \\\"rel\\\" : \\\"self\\\",\\n    \\\"type\\\" : \\\"application/json\\\",\\n    \\\"title\\\" : \\\"This document\\\",\\n    \\\"href\\\" : \\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv?f=json\\\"\\n  } ],\\n  \\\"title\\\" : \\\"Aeronautic (Curves)\\\",\\n  \\\"description\\\" : \\\"Aeronautical Facilities: Information about an area specifically designed and constructed for landing, accommodating, and launching military and/or civilian aircraft, rockets, missiles and/or spacecraft.<br/>Aeronautical Aids to Navigation: Information about electronic equipment, housings, and utilities that provide positional information for direction or otherwise assisting in the navigation of airborne aircraft.\\\",\\n  \\\"id\\\" : \\\"AeronauticCrv\\\",\\n  \\\"extent\\\" : {\\n    \\\"spatial\\\" : {\\n      \\\"bbox\\\" : [ [ 36.395158, 32.693301, 36.430814, 32.717333 ] ],\\n      \\\"crs\\\" : \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\"\\n    },\\n    \\\"temporal\\\" : {\\n      \\\"interval\\\" : [ [ \\\"2011-03-16T14:51:12Z\\\", \\\"2015-09-11T19:15:35Z\\\" ] ],\\n      \\\"trs\\\" : \\\"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\\\"\\n    }\\n  },\\n  \\\"itemType\\\" : \\\"feature\\\",\\n  \\\"crs\\\" : [ \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/3395\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/3857\\\", \\\"http://www.opengis.net/def/crs/EPSG/0/4326\\\" ],\\n  \\\"storageCrs\\\" : \\\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\\\",\\n  \\\"itemCount\\\" : 20\\n}\"\n    }\n  },\n  {\n    \"title\": \"fetch all AeronauticCrv features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"AeronauticCrv.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1743\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"c0984924-9a59-4824-a43f-b965eefe4330\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":20,\\\"numberMatched\\\":20,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4270030,32.7114540],[36.4251990,32.7137030]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:12Z\\\",\\\"UFI\\\":\\\"2d008c34-4458-4226-b335-cf903d261ce9\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4009090,32.7000770],[36.4031330,32.7013330],[36.4208880,32.7113020],[36.4231110,32.7125400],[36.4251990,32.7137030],[36.4252970,32.7137690]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"1257bf27-3f91-461d-8a3b-a95af2ea1f5a\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4049030,32.6990350],[36.4031330,32.7013330]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:12Z\\\",\\\"UFI\\\":\\\"0ee76209-d69a-4cf5-b74f-dfe563ddede7\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4226450,32.7090630],[36.4208880,32.7113020]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:13Z\\\",\\\"UFI\\\":\\\"0463e92c-cf42-4c73-ac2f-81e0d7a0654c\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3989300,32.6988040],[36.4005290,32.6965830]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"944e084c-49dc-42b3-8566-bc75e5fecf39\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":6,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4025330,32.6952330],[36.4019600,32.6953240],[36.4014490,32.6954050],[36.4012670,32.6955310],[36.4000010,32.6933010],[36.3994110,32.6935090],[36.3989490,32.6936710],[36.4000010,32.6933010],[36.4012670,32.6955310],[36.4005290,32.6965830],[36.4005160,32.6962630],[36.3995820,32.6946740]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"6d64efa5-affb-474e-893f-47aabac7b5da\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":7,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4234650,32.7141110],[36.4234560,32.7140710],[36.4231110,32.7125400]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"5ccc277e-fa94-49ca-b566-d41246d3e42b\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":8,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4294830,32.7114930],[36.4284420,32.7114460],[36.4272630,32.7113940],[36.4270030,32.7114540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"b9175c1f-43c2-455b-bdd0-f91cdffaaf6f\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":9,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4259320,32.7173330],[36.4257630,32.7170350],[36.4245000,32.7148030],[36.4257630,32.7170350],[36.4263700,32.7167880],[36.4267580,32.7166290]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:14Z\\\",\\\"UFI\\\":\\\"c9a2d4e5-67d6-458b-a89a-d664d99ea865\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":10,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3993320,32.7003240],[36.4009090,32.7000770]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"d6066359-c2cc-460e-98d4-332b915fb21f\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":11,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4268870,32.7099400],[36.4248150,32.7102540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:15Z\\\",\\\"UFI\\\":\\\"e4d806b5-73ce-4a76-ba6b-f2d80b1cad30\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":12,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4022750,32.6963170],[36.4026520,32.6977730]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:16Z\\\",\\\"UFI\\\":\\\"096f8898-4886-408a-b3a3-af40829b8508\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":13,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4233570,32.7150680],[36.4237650,32.7150030],[36.4244410,32.7148960],[36.4245000,32.7148030],[36.4250700,32.7139060],[36.4251990,32.7137030],[36.4250700,32.7139060],[36.4252450,32.7141020],[36.4262220,32.7157360]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:16Z\\\",\\\"UFI\\\":\\\"d27b2fbd-01e2-44d2-81fc-dd4b1f1b89bb\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":14,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4284420,32.7114460],[36.4292690,32.7106350],[36.4307820,32.7107260],[36.4308140,32.7112130],[36.4307490,32.7116100]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:17Z\\\",\\\"UFI\\\":\\\"29c39f1d-9c5e-4950-9f9d-80a4ea9231bf\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":15,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3987500,32.6989870],[36.3964050,32.6988310]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"80c53866-0b64-4c42-9232-33b6b9a50f86\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":16,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3951580,32.6996890],[36.3981120,32.6997940]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"7e1929ee-480f-45eb-af1f-aa41017d079a\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":17,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4009090,32.7000770],[36.3989300,32.6988040]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"755c84a1-bee7-4a06-940a-2412271b6d98\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":18,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3951580,32.6996890],[36.3951760,32.6991010],[36.3952030,32.6987410]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"74265cb8-e821-4b6a-b1ec-aac5cf988761\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":19,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3989300,32.6988040],[36.3987500,32.6989870],[36.3981120,32.6997940]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"81bb2203-dda3-484e-9509-a8dd09e52ac0\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":20,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.3981120,32.6997940],[36.3982740,32.7004670],[36.3983450,32.7007660]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:34Z\\\",\\\"UFI\\\":\\\"b3a4e01c-98e1-4076-852c-84363fbba283\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:56 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"e8323f68-3e15-451d-92de-8b1120347210\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:56Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:57 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"8c97a778-16e8-43c6-9187-809978dc3665\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:57 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"9aa82801-2581-4316-a9a3-f488b695e4b5\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:57 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"080fd00f-5f23-4137-9197-6a41f39f73fd\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  },\n  {\n    \"title\": \"fetch all CulturePnt features\",\n    \"value\": {\n      \"req\": {\n        \"method\": \"GET\",\n        \"url\": \"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250\",\n        \"headers\": {\n          \"accept\": \"application/geo+json, application/problem+json;q=0.8\"\n        }\n      },\n      \"header\": {\n        \"content-crs\": \"<http://www.opengis.net/def/crs/OGC/1.3/CRS84>\",\n        \"content-disposition\": \"inline; filename=\\\"CulturePnt.json\\\"\",\n        \"content-encoding\": \"gzip\",\n        \"content-language\": \"en\",\n        \"content-length\": \"1046\",\n        \"content-type\": \"application/geo+json\",\n        \"date\": \"Thu, 25 May 2023 16:32:57 GMT\",\n        \"link\": \"<https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv>; rel=\\\"alternate\\\"; title=\\\"This document as CSV\\\"; type=\\\"text/csv\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb>; rel=\\\"alternate\\\"; title=\\\"This document as FlatGeobuf\\\"; type=\\\"application/flatgeobuf\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html>; rel=\\\"alternate\\\"; title=\\\"This document as HTML\\\"; type=\\\"text/html\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG\\\"; type=\\\"application/vnd.ogc.fg+json\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc>; rel=\\\"alternate\\\"; title=\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"; type=\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\", <http://www.opengis.net/def/profile/ogc/0/rel-as-link>; rel=\\\"profile\\\"; title=\\\"Profile used in the response\\\", <https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json>; rel=\\\"self\\\"; title=\\\"This document\\\"; type=\\\"application/geo+json\\\"\",\n        \"vary\": \"Accept,Accept-Language,Accept-Encoding\",\n        \"x-request-id\": \"8c52a96e-2df5-4a1d-8cc8-34b2e80f3b97\",\n        \"connection\": \"close\"\n      },\n      \"status\": 200,\n      \"text\": \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":5,\\\"numberMatched\\\":5,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0964930,32.6020820]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL030\\\",\\\"ZI001_SDV\\\":\\\"2011-12-27T18:39:59Z\\\",\\\"UFI\\\":\\\"7ab54c93-b054-406f-9cf1-6921fd633277\\\",\\\"ZI005_FNA\\\":\\\"مقبرة البحارة\\\",\\\"FCSUBTYPE\\\":100092,\\\"ZI037_REL\\\":11,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"مقبرة البحارة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Al Bahara Cemetery\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1009200,32.6121330]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL130\\\",\\\"ZI001_SDV\\\":\\\"2011-12-26T20:55:27Z\\\",\\\"UFI\\\":\\\"65854536-9ffa-433e-b0c7-5779ae88d705\\\",\\\"ZI005_FNA\\\":\\\"ساحة الكرامة\\\",\\\"FCSUBTYPE\\\":100108,\\\"ZI006_MEM\\\":\\\"<OSM>{\\\\\\\"name:ar\\\\\\\":\\\\\\\"ساحة الكرامة\\\\\\\",\\\\\\\"name:en\\\\\\\":\\\\\\\"Sahet al karama\\\\\\\"}</OSM>\\\"}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":3,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.1085460,32.6405080]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"BH075\\\",\\\"ZI001_SDV\\\":\\\"2013-06-16T23:47:41Z\\\",\\\"UFI\\\":\\\"f4dbf4b1-9522-4dcb-a15b-a2b1359f6ee0\\\",\\\"ZI005_FNA\\\":\\\"نافورة البانوراما\\\",\\\"FCSUBTYPE\\\":100303}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[36.0992670,32.6125650]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AK121\\\",\\\"ZI001_SDV\\\":\\\"2011-01-03T06:31:15Z\\\",\\\"UFI\\\":\\\"a68ec353-e572-4523-9425-8f37b4a4cda6\\\",\\\"ZI005_FNA\\\":\\\"مدرج درعا الأثري\\\",\\\"FCSUBTYPE\\\":100066}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":5,\\\"geometry\\\":{\\\"type\\\":\\\"MultiPoint\\\",\\\"coordinates\\\":[[35.9535000,32.5920730]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"AL012\\\",\\\"ZI001_SDV\\\":\\\"2012-03-27T11:53:13Z\\\",\\\"UFI\\\":\\\"122207e5-5b0a-4da0-9672-0c1012952a54\\\",\\\"ZI005_FNA\\\":\\\"Roman Graves\\\",\\\"FCSUBTYPE\\\":100082}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/CulturePnt/items?limit=250&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\"\n    }\n  }\n]",
          "code": "const hooks = getHooks();\nthis.test.parent.project = { ...options };\nfor (let i = 0; i < hooks.length; i++) {\n  addContext(this, hooks[i]);\n}\nthis.test.originalTitle = \"Setup\";\nthis.test.options = { empty: hooks.length === 0 };",
          "err": {},
          "uuid": "f9f9a168-71bf-4b12-b6ea-7693f19d52c1",
          "parentUUID": "56401432-fcbe-4d82-9134-f5d2dee7c2ea",
          "isHook": true,
          "skipped": false,
          "options": {
            "empty": false
          }
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5175d8a9-e9f9-4b50-b5d2-e603d52f353e",
          "title": "between",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\between.js",
          "file": "\\spec\\between.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=ZI037_REL BeTweeN ZI037_REL AnD ZI037_REL",
              "fullTitle": "between filter=ZI037_REL BeTweeN ZI037_REL AnD ZI037_REL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "c0e3fe9e-7da2-43bd-8788-5720a9ab5d8c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL not BeTweeN ZI037_REL AnD ZI037_REL",
              "fullTitle": "between filter=ZI037_REL not BeTweeN ZI037_REL AnD ZI037_REL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "e53bb042-703a-47be-b1a3-602b27ab368a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL BeTweeN 0 AnD 10",
              "fullTitle": "between filter=ZI037_REL BeTweeN 0 AnD 10",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "b625896e-1c5c-4e9d-a86a-3ccc4aad34c4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL BeTweeN 0 AnD 11",
              "fullTitle": "between filter=ZI037_REL BeTweeN 0 AnD 11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "60a0e940-98b0-4948-9e7a-d7df7a1c9ff2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL NoT BeTweeN 0 AnD 10",
              "fullTitle": "between filter=ZI037_REL NoT BeTweeN 0 AnD 10",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "6d31ad20-d7d2-4c2f-8f3c-15d76c9fc665",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL NoT BeTweeN 0 AnD 11",
              "fullTitle": "between filter=ZI037_REL NoT BeTweeN 0 AnD 11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "b815b4a5-4a34-49b8-8b3e-6a2d0fcd5357",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=6 BeTweeN 0 AnD ZI037_REL",
              "fullTitle": "between filter=6 BeTweeN 0 AnD ZI037_REL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "bab4745d-78fb-47de-bb52-4b7ac629c96d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c0e3fe9e-7da2-43bd-8788-5720a9ab5d8c",
            "e53bb042-703a-47be-b1a3-602b27ab368a",
            "b625896e-1c5c-4e9d-a86a-3ccc4aad34c4",
            "60a0e940-98b0-4948-9e7a-d7df7a1c9ff2",
            "6d31ad20-d7d2-4c2f-8f3c-15d76c9fc665",
            "b815b4a5-4a34-49b8-8b3e-6a2d0fcd5357",
            "bab4745d-78fb-47de-bb52-4b7ac629c96d"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "between",
            "description": "Ensure that all queries involving operator **between** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "d553c442-1a7f-4d72-bf08-17f7eed17b74",
          "title": "disjoint",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\disjoint.js",
          "file": "\\spec\\disjoint.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=NoT s_DisJoinT(geometry,POLYGON((36.409482999999994 32.711493,36.429483 32.691492999999994,36.449483 32.711493,36.429483 32.731493,36.409482999999994 32.711493)))",
              "fullTitle": "disjoint filter=NoT s_DisJoinT(geometry,POLYGON((36.409482999999994 32.711493,36.429483 32.691492999999994,36.449483 32.711493,36.429483 32.731493,36.409482999999994 32.711493)))",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": \"GET https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT%20s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994%2032.711493%2C36.429483%2032.691492999999994%2C36.449483%2032.711493%2C36.429483%2032.731493%2C36.409482999999994%2032.711493%29%29%29 HTTP/1.1\\nAccept: application/geo+json, application/problem+json;q=0.8\\n\",\n    \"language\": \"http\",\n    \"index\": 0\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": \"Status Code: 200\\ncontent-crs: <http://www.opengis.net/def/crs/OGC/1.3/CRS84>\\ncontent-disposition: inline; filename=\\\"AeronauticCrv.json\\\"\\ncontent-encoding: gzip\\ncontent-language: en\\ncontent-length: 1252\\ncontent-type: application/geo+json\\ndate: Thu, 25 May 2023 16:32:57 GMT\\nvary: Accept,Accept-Language,Accept-Encoding\\nx-request-id: 80413b3d-948c-4815-b5fe-8db9b11605b2\\nconnection: close\\n\\n{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":9,\\\"numberMatched\\\":9,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":1,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4270030,32.7114540],[36.4251990,32.7137030]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:12Z\\\",\\\"UFI\\\":\\\"2d008c34-4458-4226-b335-cf903d261ce9\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":2,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4009090,32.7000770],[36.4031330,32.7013330],[36.4208880,32.7113020],[36.4231110,32.7125400],[36.4251990,32.7137030],[36.4252970,32.7137690]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2015-09-11T19:15:35Z\\\",\\\"UFI\\\":\\\"1257bf27-3f91-461d-8a3b-a95af2ea1f5a\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":4,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4226450,32.7090630],[36.4208880,32.7113020]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2011-03-16T14:51:13Z\\\",\\\"UFI\\\":\\\"0463e92c-cf42-4c73-ac2f-81e0d7a0654c\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":7,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4234650,32.7141110],[36.4234560,32.7140710],[36.4231110,32.7125400]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"5ccc277e-fa94-49ca-b566-d41246d3e42b\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":8,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4294830,32.7114930],[36.4284420,32.7114460],[36.4272630,32.7113940],[36.4270030,32.7114540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:13Z\\\",\\\"UFI\\\":\\\"b9175c1f-43c2-455b-bdd0-f91cdffaaf6f\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":9,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4259320,32.7173330],[36.4257630,32.7170350],[36.4245000,32.7148030],[36.4257630,32.7170350],[36.4263700,32.7167880],[36.4267580,32.7166290]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:14Z\\\",\\\"UFI\\\":\\\"c9a2d4e5-67d6-458b-a89a-d664d99ea865\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":11,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4268870,32.7099400],[36.4248150,32.7102540]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:15Z\\\",\\\"UFI\\\":\\\"e4d806b5-73ce-4a76-ba6b-f2d80b1cad30\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":13,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4233570,32.7150680],[36.4237650,32.7150030],[36.4244410,32.7148960],[36.4245000,32.7148030],[36.4250700,32.7139060],[36.4251990,32.7137030],[36.4250700,32.7139060],[36.4252450,32.7141020],[36.4262220,32.7157360]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:16Z\\\",\\\"UFI\\\":\\\"d27b2fbd-01e2-44d2-81fc-dd4b1f1b89bb\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}},{\\\"type\\\":\\\"Feature\\\",\\\"id\\\":14,\\\"geometry\\\":{\\\"type\\\":\\\"MultiLineString\\\",\\\"coordinates\\\":[[[36.4284420,32.7114460],[36.4292690,32.7106350],[36.4307820,32.7107260],[36.4308140,32.7112130],[36.4307490,32.7116100]]]},\\\"properties\\\":{\\\"F_CODE\\\":\\\"GB075\\\",\\\"ZI001_SDV\\\":\\\"2012-01-03T16:24:17Z\\\",\\\"UFI\\\":\\\"29c39f1d-9c5e-4950-9f9d-80a4ea9231bf\\\",\\\"ZI005_FNA\\\":\\\"No Information\\\",\\\"FCSUBTYPE\\\":100454}}],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2836.409482999999994+32.711493%2C36.429483+32.691492999999994%2C36.449483+32.711493%2C36.429483+32.731493%2C36.409482999999994+32.711493%29%29%29&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\",\n    \"language\": \"http\",\n    \"index\": 0\n  }\n]",
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "59b49154-f6e9-45b8-a566-6cab7ea61176",
              "parentUUID": "d553c442-1a7f-4d72-bf08-17f7eed17b74",
              "isHook": false,
              "skipped": false,
              "options": {}
            },
            {
              "title": "filter=NoT s_DisJoinT(geometry,POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))",
              "fullTitle": "disjoint filter=NoT s_DisJoinT(geometry,POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": \"GET https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT%20s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493%2036.409482999999994%2C%2032.691492999999994%2036.429483%2C%2032.711493%2036.449483%2C%2032.731493%2036.429483%2C%2032.711493%2036.409482999999994%29%29%29 HTTP/1.1\\nAccept: application/geo+json, application/problem+json;q=0.8\\n\",\n    \"language\": \"http\",\n    \"index\": 0\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": \"Status Code: 200\\ncontent-crs: <http://www.opengis.net/def/crs/OGC/1.3/CRS84>\\ncontent-disposition: inline; filename=\\\"AeronauticCrv.json\\\"\\ncontent-encoding: gzip\\ncontent-language: en\\ncontent-length: 532\\ncontent-type: application/geo+json\\ndate: Thu, 25 May 2023 16:32:57 GMT\\nvary: Accept,Accept-Language,Accept-Encoding\\nx-request-id: 00f8ca0b-5439-4ac7-91e4-16ce205e70ce\\nconnection: close\\n\\n{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":0,\\\"numberMatched\\\":0,\\\"timeStamp\\\":\\\"2023-05-25T16:32:57Z\\\",\\\"features\\\":[],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\",\n    \"language\": \"http\",\n    \"index\": 0\n  }\n]",
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "7b55ee52-e037-4d39-aadb-33221fcb0bfd",
              "parentUUID": "d553c442-1a7f-4d72-bf08-17f7eed17b74",
              "isHook": false,
              "skipped": false,
              "options": {}
            },
            {
              "title": "filter=NoT s_DisJoinT(geometry,POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))",
              "fullTitle": "disjoint filter=NoT s_DisJoinT(geometry,POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))",
              "timedOut": false,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": \"GET https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT%20s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493%2036.409482999999994%2C%2032.691492999999994%2036.429483%2C%2032.711493%2036.449483%2C%2032.731493%2036.429483%2C%2032.711493%2036.409482999999994%29%29%29 HTTP/1.1\\nAccept: application/geo+json, application/problem+json;q=0.8\\n\",\n    \"language\": \"http\",\n    \"index\": 0\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": \"Status Code: 200\\ncontent-crs: <http://www.opengis.net/def/crs/OGC/1.3/CRS84>\\ncontent-disposition: inline; filename=\\\"AeronauticCrv.json\\\"\\ncontent-encoding: gzip\\ncontent-language: en\\ncontent-length: 531\\ncontent-type: application/geo+json\\ndate: Thu, 25 May 2023 16:32:58 GMT\\nvary: Accept,Accept-Language,Accept-Encoding\\nx-request-id: c616d9d9-2d1e-4993-8a88-30c6820a5054\\nconnection: close\\n\\n{\\\"type\\\":\\\"FeatureCollection\\\",\\\"numberReturned\\\":0,\\\"numberMatched\\\":0,\\\"timeStamp\\\":\\\"2023-05-25T16:32:58Z\\\",\\\"features\\\":[],\\\"links\\\":[{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=json\\\",\\\"rel\\\":\\\"self\\\",\\\"type\\\":\\\"application/geo+json\\\",\\\"title\\\":\\\"This document\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=jsonfgc\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json;compatibility=geojson\\\",\\\"title\\\":\\\"This document as JSON-FG (GeoJSON Compatibility Mode)\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=csv\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/csv\\\",\\\"title\\\":\\\"This document as CSV\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=fgb\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/flatgeobuf\\\",\\\"title\\\":\\\"This document as FlatGeobuf\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=html\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"text/html\\\",\\\"title\\\":\\\"This document as HTML\\\"},{\\\"href\\\":\\\"https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?limit=250&filter=NoT+s_DisJoinT%28geometry%2CPOLYGON%28%2832.711493+36.409482999999994%2C+32.691492999999994+36.429483%2C+32.711493+36.449483%2C+32.731493+36.429483%2C+32.711493+36.409482999999994%29%29%29&f=jsonfg\\\",\\\"rel\\\":\\\"alternate\\\",\\\"type\\\":\\\"application/vnd.ogc.fg+json\\\",\\\"title\\\":\\\"This document as JSON-FG\\\"},{\\\"href\\\":\\\"http://www.opengis.net/def/profile/ogc/0/rel-as-link\\\",\\\"rel\\\":\\\"profile\\\",\\\"title\\\":\\\"Profile used in the response\\\"}]}\",\n    \"language\": \"http\",\n    \"index\": 0\n  }\n]",
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "0d478e5e-2cbe-4473-988d-bfda9b5c960f",
              "parentUUID": "d553c442-1a7f-4d72-bf08-17f7eed17b74",
              "isHook": false,
              "skipped": false,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [
            "59b49154-f6e9-45b8-a566-6cab7ea61176",
            "7b55ee52-e037-4d39-aadb-33221fcb0bfd",
            "0d478e5e-2cbe-4473-988d-bfda9b5c960f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 436,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "disjoint",
            "description": "Ensure that all queries involving operator **disjoint** work correctly. <br/>      Collections: [Daraa - Aeronautic (Curves)](https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=html)"
          }
        },
        {
          "uuid": "b3a7c5f3-cebf-4e89-a349-318da33bc42c",
          "title": "eq",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\eq.js",
          "file": "\\spec\\eq.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE=F_CODE",
              "fullTitle": "eq filter=F_CODE=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "e9572843-91b8-4867-81d4-c8b924e14618",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE='AL030'",
              "fullTitle": "eq filter=F_CODE='AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "48a0363a-52b4-47fb-8455-4949471a2a89",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'=F_CODE",
              "fullTitle": "eq filter='AL030'=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "b9d4b83b-c606-4a5a-b868-4c18323c8eff",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "F_CODE=AL030",
              "fullTitle": "eq F_CODE=AL030",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "e72ea145-201d-4fb7-95c1-c11eadacb4e1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL=11",
              "fullTitle": "eq filter=ZI037_REL=11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "8e6aaa10-e09a-45c1-b273-0236c6f89379",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'='A'",
              "fullTitle": "eq filter='A'='A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "6e40f1c7-7678-4b65-8b58-6e1ae4785bef",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=\"F_CODE\"='AL030'",
              "fullTitle": "eq filter=\"F_CODE\"='AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "87d2e907-cbff-4a1d-944d-017d71f03f1a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV=TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "eq filter=ZI001_SDV=TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "da5137db-3f7e-4f2e-89a5-908a67ae0d42",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e9572843-91b8-4867-81d4-c8b924e14618",
            "48a0363a-52b4-47fb-8455-4949471a2a89",
            "b9d4b83b-c606-4a5a-b868-4c18323c8eff",
            "e72ea145-201d-4fb7-95c1-c11eadacb4e1",
            "8e6aaa10-e09a-45c1-b273-0236c6f89379",
            "6e40f1c7-7678-4b65-8b58-6e1ae4785bef",
            "87d2e907-cbff-4a1d-944d-017d71f03f1a",
            "da5137db-3f7e-4f2e-89a5-908a67ae0d42"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "eq",
            "description": "Ensure that all queries involving operator **eq** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "ec5cf440-c354-41af-b6ca-e0f755a8b4dc",
          "title": "gt",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\gt.js",
          "file": "\\spec\\gt.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE>F_CODE",
              "fullTitle": "gt filter=F_CODE>F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "b015e7d3-2915-4ba8-95c9-74c8bb2bc3f2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE>'AL030'",
              "fullTitle": "gt filter=F_CODE>'AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "9aebfc72-3d49-4acf-a849-84851dbe835c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL>11",
              "fullTitle": "gt filter=ZI037_REL>11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "6bdbcde6-4c5b-4240-8af3-509010e8f7cd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL>0",
              "fullTitle": "gt filter=ZI037_REL>0",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "770c934a-b4b1-4c50-bca1-5bb9853d695d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'>F_CODE",
              "fullTitle": "gt filter='AL030'>F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "6c99d424-aa8c-400e-baf3-8363bb14436a",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'>'A'",
              "fullTitle": "gt filter='A'>'A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "dce4399a-9675-41cf-9849-7e004f835c17",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV>TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "gt filter=ZI001_SDV>TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "11abd638-20f1-4193-8390-31b818c8a213",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b015e7d3-2915-4ba8-95c9-74c8bb2bc3f2",
            "9aebfc72-3d49-4acf-a849-84851dbe835c",
            "6bdbcde6-4c5b-4240-8af3-509010e8f7cd",
            "770c934a-b4b1-4c50-bca1-5bb9853d695d",
            "6c99d424-aa8c-400e-baf3-8363bb14436a",
            "dce4399a-9675-41cf-9849-7e004f835c17",
            "11abd638-20f1-4193-8390-31b818c8a213"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "gt",
            "description": "Ensure that all queries involving operator **gt** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "b94680e5-a6ec-40c9-9431-2cbc9d5b2777",
          "title": "gteq",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\gteq.js",
          "file": "\\spec\\gteq.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE>=F_CODE",
              "fullTitle": "gteq filter=F_CODE>=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "0b4797c0-002e-4376-a5a6-df2998f3134c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE>='AL030'",
              "fullTitle": "gteq filter=F_CODE>='AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "192bd471-fa2a-40b7-aaea-a54134e4893d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL>=11",
              "fullTitle": "gteq filter=ZI037_REL>=11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "b8ae7d06-9e28-4264-a10c-d7dd8b6f35a4",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL>=10",
              "fullTitle": "gteq filter=ZI037_REL>=10",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "50c34d58-7706-408b-8a1b-160854cafc7c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'>=F_CODE",
              "fullTitle": "gteq filter='AL030'>=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "6fcfeb2b-f336-4997-b015-17c41159000e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'>='A'",
              "fullTitle": "gteq filter='A'>='A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "31cee208-8df4-4b65-863b-dd9dd5d50f79",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV>=TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "gteq filter=ZI001_SDV>=TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "b1843310-5512-4d82-9bce-8d7baa5e02da",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "0b4797c0-002e-4376-a5a6-df2998f3134c",
            "192bd471-fa2a-40b7-aaea-a54134e4893d",
            "b8ae7d06-9e28-4264-a10c-d7dd8b6f35a4",
            "50c34d58-7706-408b-8a1b-160854cafc7c",
            "6fcfeb2b-f336-4997-b015-17c41159000e",
            "31cee208-8df4-4b65-863b-dd9dd5d50f79",
            "b1843310-5512-4d82-9bce-8d7baa5e02da"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "gteq",
            "description": "Ensure that all queries involving operator **gteq** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "3a6d7fa4-8108-41a6-8dcc-9e89aef91ade",
          "title": "in",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\in.js",
          "file": "\\spec\\in.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=CASEI(F_CODE) iN (CASEI('AL030'), CASEI('AL012'))",
              "fullTitle": "in filter=CASEI(F_CODE) iN (CASEI('AL030'), CASEI('AL012'))",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "40a7868b-ebab-4e19-abca-da8b604da240",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE NoT iN ('AL030', 'AL012')",
              "fullTitle": "in filter=F_CODE NoT iN ('AL030', 'AL012')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "ff5221f8-9535-4266-9004-99899a7806bc",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL iN (11, 12)",
              "fullTitle": "in filter=ZI037_REL iN (11, 12)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "9484b05d-f8ef-476a-b684-350c2ceb4ef5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL not iN (11, 12)",
              "fullTitle": "in filter=ZI037_REL not iN (11, 12)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "098bbdad-17f3-4038-8c20-54cdddc674e7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV IN (TIMESTAMP('2011-12-26T20:55:27Z'),TIMESTAMP('2021-10-10T10:10:10Z'),TIMESTAMP('2011-12-27T18:39:59Z'))",
              "fullTitle": "in filter=ZI001_SDV IN (TIMESTAMP('2011-12-26T20:55:27Z'),TIMESTAMP('2021-10-10T10:10:10Z'),TIMESTAMP('2011-12-27T18:39:59Z'))",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "c1b8e5db-6e22-4174-b8e0-2f9707a2c963",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "40a7868b-ebab-4e19-abca-da8b604da240",
            "ff5221f8-9535-4266-9004-99899a7806bc",
            "9484b05d-f8ef-476a-b684-350c2ceb4ef5",
            "098bbdad-17f3-4038-8c20-54cdddc674e7",
            "c1b8e5db-6e22-4174-b8e0-2f9707a2c963"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "in",
            "description": "Ensure that all queries involving operator **in** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "aa3d1656-bd67-4721-9662-45f1791b59b5",
          "title": "intersects",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\intersects.js",
          "file": "\\spec\\intersects.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=s_InterSectS(geometry,geometry)",
              "fullTitle": "intersects filter=s_InterSectS(geometry,geometry)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "d5a4a177-1a0d-4d60-9f5b-3b3655712198",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(geometry,ENVELOPE(36.395158,32.693301,36.430814,32.717333))",
              "fullTitle": "intersects filter=s_InterSectS(geometry,ENVELOPE(36.395158,32.693301,36.430814,32.717333))",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "312b3661-f0c9-47f1-981a-141abe0f00d1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(ENVELOPE(36.395158,32.693301,36.430814,32.717333),geometry)",
              "fullTitle": "intersects filter=s_InterSectS(ENVELOPE(36.395158,32.693301,36.430814,32.717333),geometry)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "c19e4585-5c19-4b31-acb1-a398ef7cb6f8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(geometry,ENVELOPE(36.409482999999994,32.691492999999994,36.449483,32.731493))",
              "fullTitle": "intersects filter=s_InterSectS(geometry,ENVELOPE(36.409482999999994,32.691492999999994,36.449483,32.731493))",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "ed2ce68b-2581-44da-92c3-3a62e928794c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(ENVELOPE(36.409482999999994,32.691492999999994,36.449483,32.731493),geometry)",
              "fullTitle": "intersects filter=s_InterSectS(ENVELOPE(36.409482999999994,32.691492999999994,36.449483,32.731493),geometry)",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "95cfd9cc-b457-477a-90ff-e3e37a06d2db",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(ENVELOPE(32.691492999999994,36.409482999999994,32.731493,36.449483),geometry)&filter-crs=http://www.opengis.net/def/crs/EPSG/0/4326",
              "fullTitle": "intersects filter=s_InterSectS(ENVELOPE(32.691492999999994,36.409482999999994,32.731493,36.449483),geometry)&filter-crs=http://www.opengis.net/def/crs/EPSG/0/4326",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "94426e8d-6802-4738-ae0d-2e97f88a6868",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(geometry,POLYGON((36.409482999999994 32.711493,36.429483 32.691492999999994,36.449483 32.711493,36.429483 32.731493,36.409482999999994 32.711493)))",
              "fullTitle": "intersects filter=s_InterSectS(geometry,POLYGON((36.409482999999994 32.711493,36.429483 32.691492999999994,36.449483 32.711493,36.429483 32.731493,36.409482999999994 32.711493)))",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "a37ed419-02eb-4c46-b9fe-f68a892a27fe",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=s_InterSectS(geometry, POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))&filter-crs=http://www.opengis.net/def/crs/EPSG/0/4326",
              "fullTitle": "intersects filter=s_InterSectS(geometry, POLYGON((32.711493 36.409482999999994, 32.691492999999994 36.429483, 32.711493 36.449483, 32.731493 36.429483, 32.711493 36.409482999999994)))&filter-crs=http://www.opengis.net/def/crs/EPSG/0/4326",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/AeronauticCrv/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // Saves response if it is needed later\n          .expect(async (res) => {\n            if (test.withBody) {\n              await test.withBody(res.body);\n            }\n            // Either calls shouldIncludeId or featuresMatch\n            test.expect(res.body, test, vars.load(collectionFeatures));\n          })",
              "err": {},
              "uuid": "8926f199-67b5-4128-98be-18b3865561f1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "d5a4a177-1a0d-4d60-9f5b-3b3655712198",
            "312b3661-f0c9-47f1-981a-141abe0f00d1",
            "c19e4585-5c19-4b31-acb1-a398ef7cb6f8",
            "ed2ce68b-2581-44da-92c3-3a62e928794c",
            "95cfd9cc-b457-477a-90ff-e3e37a06d2db",
            "94426e8d-6802-4738-ae0d-2e97f88a6868",
            "a37ed419-02eb-4c46-b9fe-f68a892a27fe",
            "8926f199-67b5-4128-98be-18b3865561f1"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "intersects",
            "description": "Ensure that all queries involving operator **intersects** work correctly. <br/>      Collections: [Daraa - Aeronautic (Curves)](https://demo.ldproxy.net/daraa/collections/AeronauticCrv/items?f=html)"
          }
        },
        {
          "uuid": "699ab3bd-8042-4516-9694-b2934a147a58",
          "title": "like",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\like.js",
          "file": "\\spec\\like.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE LiKe 'AL0%'",
              "fullTitle": "like filter=F_CODE LiKe 'AL0%'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "27a90f03-99b4-407b-baf0-e2b6012232b0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE LiKe 'AL0__'",
              "fullTitle": "like filter=F_CODE LiKe 'AL0__'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "30fd0303-266f-44e8-b4f3-6b906a78e3ec",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=CASEI(F_CODE) LiKe casei('al0__')",
              "fullTitle": "like filter=CASEI(F_CODE) LiKe casei('al0__')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "0b4f0405-c1c8-4d51-82b9-129a969346fa",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=CASEI(F_CODE) LiKe casei('al0%')",
              "fullTitle": "like filter=CASEI(F_CODE) LiKe casei('al0%')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "6b7a3c41-1a9c-4f27-b580-9fc75d697256",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE LiKe 'al0%'",
              "fullTitle": "like filter=F_CODE LiKe 'al0%'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "04dc6eb8-a74c-42dd-a6a4-6a50a239f0d0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE LiKe '%''%'",
              "fullTitle": "like filter=F_CODE LiKe '%''%'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "637a36b1-4156-412e-89db-6b13ed0227f6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "27a90f03-99b4-407b-baf0-e2b6012232b0",
            "30fd0303-266f-44e8-b4f3-6b906a78e3ec",
            "0b4f0405-c1c8-4d51-82b9-129a969346fa",
            "6b7a3c41-1a9c-4f27-b580-9fc75d697256",
            "04dc6eb8-a74c-42dd-a6a4-6a50a239f0d0",
            "637a36b1-4156-412e-89db-6b13ed0227f6"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "like",
            "description": "Ensure that all queries involving operator **like** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "f0872266-9469-4909-9548-5246ff99d6af",
          "title": "lt",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\lt.js",
          "file": "\\spec\\lt.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE<F_CODE",
              "fullTitle": "lt filter=F_CODE<F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "00460489-9c57-437a-9dc2-1f78b7b0ea9e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE<'AL030'",
              "fullTitle": "lt filter=F_CODE<'AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "47ee9982-c7f7-4d34-9c39-bcac7a0c3257",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<11",
              "fullTitle": "lt filter=ZI037_REL<11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "54bb8aee-4c16-4e1b-9564-3dd55fb52444",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<12",
              "fullTitle": "lt filter=ZI037_REL<12",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "1008ac46-5c97-4ca3-a16c-5b1ee26ff55f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'<F_CODE",
              "fullTitle": "lt filter='AL030'<F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "ff0af124-83ed-434d-8f04-7ddfc6131671",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'<'A'",
              "fullTitle": "lt filter='A'<'A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "89a7915d-1480-469a-b0da-f0a0480347c8",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV<TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "lt filter=ZI001_SDV<TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "83f6c222-7e78-4a85-accb-a4b69061a31d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "00460489-9c57-437a-9dc2-1f78b7b0ea9e",
            "47ee9982-c7f7-4d34-9c39-bcac7a0c3257",
            "54bb8aee-4c16-4e1b-9564-3dd55fb52444",
            "1008ac46-5c97-4ca3-a16c-5b1ee26ff55f",
            "ff0af124-83ed-434d-8f04-7ddfc6131671",
            "89a7915d-1480-469a-b0da-f0a0480347c8",
            "83f6c222-7e78-4a85-accb-a4b69061a31d"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "lt",
            "description": "Ensure that all queries involving operator **lt** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "2ef8fc6f-83f0-4720-863c-0ddd237c93af",
          "title": "lteq",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\lteq.js",
          "file": "\\spec\\lteq.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE<=F_CODE",
              "fullTitle": "lteq filter=F_CODE<=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "2b7a5422-6981-42c2-9315-b2fd965d2646",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE<='AL030'",
              "fullTitle": "lteq filter=F_CODE<='AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "eda0d193-45de-4813-acf5-721235dcad75",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<=11",
              "fullTitle": "lteq filter=ZI037_REL<=11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "e94590d7-89d5-4fcb-b533-f8b9b9fab606",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<=10",
              "fullTitle": "lteq filter=ZI037_REL<=10",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "a31d6053-9b5f-427c-8810-1567de20b5f1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'<=F_CODE",
              "fullTitle": "lteq filter='AL030'<=F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "2020ff46-1fbd-4168-9764-d9ffebbbd56d",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'<='A'",
              "fullTitle": "lteq filter='A'<='A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "085df9f1-4ae9-4626-8e5d-12ccf2193d25",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV<=TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "lteq filter=ZI001_SDV<=TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "571042bd-4d58-4fc2-a8d8-67508aa81a6e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2b7a5422-6981-42c2-9315-b2fd965d2646",
            "eda0d193-45de-4813-acf5-721235dcad75",
            "e94590d7-89d5-4fcb-b533-f8b9b9fab606",
            "a31d6053-9b5f-427c-8810-1567de20b5f1",
            "2020ff46-1fbd-4168-9764-d9ffebbbd56d",
            "085df9f1-4ae9-4626-8e5d-12ccf2193d25",
            "571042bd-4d58-4fc2-a8d8-67508aa81a6e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "lteq",
            "description": "Ensure that all queries involving operator **lteq** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "40fc7179-3928-4b5e-96b2-be215d013dff",
          "title": "neq",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\neq.js",
          "file": "\\spec\\neq.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=F_CODE<>F_CODE",
              "fullTitle": "neq filter=F_CODE<>F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "9c5d945c-6a20-4f49-870f-6d2f9dbd95d6",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=F_CODE<>'AL030'",
              "fullTitle": "neq filter=F_CODE<>'AL030'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "e4a3778b-d7c2-44cf-a046-249651cfba6f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<>11",
              "fullTitle": "neq filter=ZI037_REL<>11",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "1a34e871-4442-45e8-ba54-36b8eb690ca2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL<>10",
              "fullTitle": "neq filter=ZI037_REL<>10",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "64fcc332-f617-4548-b054-87e630e2f09b",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='AL030'<>F_CODE",
              "fullTitle": "neq filter='AL030'<>F_CODE",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "423c13cb-73ee-4103-a88f-2abb401b41d9",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter='A'<>'A'",
              "fullTitle": "neq filter='A'<>'A'",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "f3f1b6ab-9e6e-4464-88a2-c92d6eea6fc7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI001_SDV<>TIMESTAMP('2011-12-26T20:55:27Z')",
              "fullTitle": "neq filter=ZI001_SDV<>TIMESTAMP('2011-12-26T20:55:27Z')",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "b673bfe0-9b09-47e1-8bb4-0519b3634c86",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "9c5d945c-6a20-4f49-870f-6d2f9dbd95d6",
            "e4a3778b-d7c2-44cf-a046-249651cfba6f",
            "1a34e871-4442-45e8-ba54-36b8eb690ca2",
            "64fcc332-f617-4548-b054-87e630e2f09b",
            "423c13cb-73ee-4103-a88f-2abb401b41d9",
            "f3f1b6ab-9e6e-4464-88a2-c92d6eea6fc7",
            "b673bfe0-9b09-47e1-8bb4-0519b3634c86"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "neq",
            "description": "Ensure that all queries involving operator **neq** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        },
        {
          "uuid": "86ee177a-ec78-4217-beca-fa629667caeb",
          "title": "null",
          "fullFile": "C:\\Users\\p.zahnen\\Documents\\Projekte\\demo-tests\\filter-queries\\spec\\null.js",
          "file": "\\spec\\null.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "filter=ZI037_REL iS NulL",
              "fullTitle": "null filter=ZI037_REL iS NulL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "33486706-09c6-4358-a424-f6efe36266f7",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            },
            {
              "title": "filter=ZI037_REL iS not NulL",
              "fullTitle": "null filter=ZI037_REL iS not NulL",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Data is selected using filter\n        api\n          .get(\"/daraa/collections/CulturePnt/items\")\n          .query({ limit: LIMIT, ...test.query })\n          // Success and returns GeoJSON\n          .expect(200)\n          .expect(CONTENT_TYPE, GEO_JSON)\n          // returns correct amount of features\n          .expect((res) => {\n            const expected = vars\n              .load(CULTURE_PNT_FEATURES)\n              .features.filter(test.filter);\n            res.body.should.have\n              .property(\"numberReturned\")\n              .which.equals(expected.length);\n            //returns the expected features:\n            const actual = res.body.features;\n            for (let i = 0; i < actual.length; i++) {\n              actual[i].should.have.property(\"id\").which.equals(expected[i].id);\n              actual[i].should.have\n                .property(\"type\")\n                .which.equals(expected[i].type);\n              actual[i].should.have\n                .property(\"geometry\")\n                .which.deep.equals(expected[i].geometry);\n              actual[i].should.have\n                .property(\"properties\")\n                .which.deep.equals(expected[i].properties);\n            }\n          })",
              "err": {},
              "uuid": "ba31757e-c85d-400e-a870-576178d5e14e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true,
              "options": {}
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "33486706-09c6-4358-a424-f6efe36266f7",
            "ba31757e-c85d-400e-a870-576178d5e14e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000,
          "options": {
            "title": "null",
            "description": "Ensure that all queries involving operator **null** work correctly. <br/>      Collections: [Daraa - Cultural Points](https://demo.ldproxy.net/daraa/collections/CulturePnt/items?f=html)"
          }
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "index",
        "inline": true,
        "code": true,
        "charts": true,
        "saveJson": true,
        "saveHtml": true,
        "htmlModule": "@catsjs/report",
        "showSkipped": true,
        "showPending": true,
        "showHooks": "always"
      },
      "version": "6.2.0"
    },
    "cats": {
      "name": "cats",
      "version": "1.0.0-beta.6",
      "link": {
        "type": "git",
        "url": "https://github.com/catsjs/cats.git",
        "directory": "packages/core"
      },
      "options": {}
    }
  },
  "project": {
    "title": "filter-queries",
    "api": "https://demo.ldproxy.net",
    "description": "Validates the correct implementation of filters for the [Daraa API](https://demo.ldproxy.net/daraa) and [CShapes API](https://demo.ldproxy.net/cshapes).",
    "protocol": {
      "plugin": "@catsjs/http",
      "defaults": {
        "accept": "application/geo+json, application/problem+json;q=0.8"
      }
    },
    "contentTypes": [
      "@catsjs/json"
    ],
    "verbose": false,
    "name": "filter-queries",
    "version": "0.9.0",
    "mocha": {
      "ui": "@catsjs/core/interface",
      "reporter": "@catsjs/core/reporter",
      "require": [
        "@catsjs/core/dsl",
        "@catsjs/core/hooks"
      ],
      "spec": "spec",
      "recursive": true,
      "timeout": "60s",
      "slow": "500ms"
    }
  }
}